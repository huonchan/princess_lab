<!DOCTYPE html>
<html>

<head>
    <title>WaterSortPuzzle_Prot</title>
    <style>
        .unit {
            display: inline-block;
            border-right: 1px solid black;
            border-bottom: 1px solid black;
            border-left: 1px solid black;
            
        }

        .test_tube
        {
            padding: 1px;
            margin: 12px;
            /* width:16px;
            height:90px; */
            font-size: xx-large;
            line-height: 1.05;
        }

        .hidden {
            visibility: hidden;
        }

        .blue {
            color: blue;
        }

        .red {
            color: red;
        }

        .yellow {
            color: yellow;
        }

        .green {
            color: green;
        }

        .yellow_green {
            color: yellowgreen;
        }

        .palevioletred {
            color: palevioletred;
        }

        .purple {
            color: purple;
        }
    </style>
</head>

<body>
    <h1>WaterSortPuzzle_Prot</h1>
    <div id="game_screen">


        <!-- どうせここは上書きされる-->

        <div class="test_tube 0">

            <div class = "space">
                <div class="blue">█<br></div>
                <div class="blue">█<br></div>
                <div class="hidden">█<br></div>
                <div class="hidden">█<br></div>
            </div>

            <div class="unit">
                <div class="hidden">█<br></div>
                <div class="hidden">█<br></div>
                <div class="red">█<br></div>
                <div class="red">█<br></div>
            </div>


        </div>

        <!-- -->

    </div>

    <div id="debug_log">

    </div>

</body>

<script>

    const HORIZONTAL_LINE = 4;//4
    const VERTICAL_LINE = 2;//2
    const BLOCK_MAX = 4;
    const START_USE_TEST_TUBE = 7;
    const START_FREE_TEST_TUBE = 2;

    const COLORS = ["none", "blue", "red", "yellow", "green", "yellow_green", "palevioletred", "purple"];

    function convertTo2DArrayFrom(array, length) {
        return Array.from({ length: Math.ceil(array.length / length) }, (_, i) =>
            array.slice(i * length, (i + 1) * length)
        );
    }

    function UpdateScreen() {
        //const arr = [1, 1, 1, 1, 2, 2, 2, 2];
        var arr = [];
        // 内部生成
        {
            //let loop_num = HORIZONTAL_LINE * VERTICAL_LINE * BLOCK_MAX;
            for (let i = 0; i < START_USE_TEST_TUBE; i++) {
                for (let j = 0; j < BLOCK_MAX; j++) {
                    arr.push(i + 1);
                }
            }
        }

        // シャッフルアルゴリズム（Fisher-Yates shuffle）
        for (let i = arr.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [arr[i], arr[j]] = [arr[j], arr[i]]; // 要素の入れ替え
        }

        //空の試験管追加
        {
            for (let i = 0; i < BLOCK_MAX * START_FREE_TEST_TUBE; i++) {
                arr.push(0);
            }
        }


        const arr_2d = convertTo2DArrayFrom(arr, BLOCK_MAX);

        var test_tube_num = 0;
        var html = ``;
        arr_2d.forEach(row => {

            html += `<div class="test_tube test_tube_${test_tube_num}">
                `;
            row.forEach(element => {

                if (element === 0) {
                    html += `<div class="hidden">█<br></div>
                    `;
                } else {
                    html += `<div class="${COLORS[element]}">█<br></div>
                    `;
                }


            });


            html += `</div>
            `;

            test_tube_num += 1;
        });


        const game_screen = document.getElementById("game_screen");
        game_screen.innerHTML = html;

        const debug_log = document.getElementById("debug_log");
        //debug_log.textContent = html;
    }


    //UpdateScreen();

</script>

</html>