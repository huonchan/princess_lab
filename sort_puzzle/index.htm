<!DOCTYPE html>
<html>

<head>
    <title>おひめパズル</title>
    <style>
        .button-container button {
            display: inline-block;
            margin-right: 10px;
            /* ボタン間の余白 */
            padding: 10px 20px;
        }

        .unit {
            display: inline-block;
            border-right: 2px solid black;
            border-bottom: 2px solid black;
            border-left: 2px solid black;
            z-index: 1;
            /* z-indexを設定 */

        }

        #debug_log {
            display: inline-block
        }

        .test_tube {
            padding: 1px;
            margin: 12px;
            /* width:16px;
            height:90px; */
            color: black;
            font-size: 50px;
            line-height: 1.05;
            display: inline-block
        }

        .hidden {
            visibility: hidden;
            pointer-events: none
        }

        .blue {
            color: blue;
            pointer-events: none
        }

        .red {
            color: red;
            pointer-events: none
        }

        .yellow {
            color: yellow;
            pointer-events: none
        }

        .green {
            color: green;
            pointer-events: none
        }

        .yellow_green {
            color: yellowgreen;
            pointer-events: none
        }

        .palevioletred {
            color: palevioletred;
            pointer-events: none
        }

        .purple {
            color: purple;
            pointer-events: none
        }
    </style>
</head>

<body>
    <h1>おひめパズル（仮）</h1>
    <div id="game_status"> お前が煩ってる時間[ 0:00:34 ] , 試行回数 [ 1 ]</div>
    <div id="game_screen">


        <!-- どうせここは上書きされる-->

        <div class="test_tube 0">

            <div class="space">
                <div class="blue">█<br></div>
                <div class="blue">█<br></div>
                <div class="hidden">█<br></div>
                <div class="hidden">█<br></div>
            </div>

            <div class="unit">
                <div class="hidden">█<br></div>
                <div class="hidden">█<br></div>
                <div class="red">█<br></div>
                <div class="red">█<br></div>
            </div>


        </div>

        <!-- -->

    </div>
    <div id="game_button_area">

        <div class="button-container">
            <button id="start_button">準備はいいか？野郎ども…！<br>START</button>
            <button id="return_button">後戻りとかだっせぇなぁ…ｗ<br>RETURN</button>
            <button id="add_test_tube">試験管増やすとか甘え…ｗ<br>ADD TEST TUBE</button>
        </div>

    </div>

    <div id="text_area">
        <div id="debug_log">

        </div>

        <div id="free_space">

        </div>

        <div id="ascii_art">

        </div>
    </div>


</body>


<script>
    //一枚のファイルに纏めたいので、あえて外部は中止
    //定数

    //描画処理

    const HORIZONTAL_LINE = 4;//4
    const VERTICAL_LINE = 2;//2
    const BLOCK_MAX = 4;
    const START_FREE_TEST_TUBE = 2;
    const START_USE_TEST_TUBE = HORIZONTAL_LINE * VERTICAL_LINE - START_FREE_TEST_TUBE;
    const BLOCK_CHAR = "█";
    //const BLOCK_CHAR ="♥";
    //const BLOCK_CHAR ="🤓";
    //const BLOCK_CHAR ="牛角の男性差別商法。私の導火線に火がついた。絶対ゆるさねぇぞ。今まで個人店のレディースデーは数え切れないほど潰してきたけど、今度は名の通った企業相手だから、全身全霊で戦いを挑んでやる。久々に闘志が沸いてきたよ。合法の範囲で使える手はどんな手を使ってでも戦ってやる";
    const COLORS = ["none", "blue", "red", "yellow", "green", "yellow_green", "palevioletred", "purple"];


    //一次元配列を２次元配列に変換する
    function convertTo2DArrayFrom(array, length) {
        return Array.from({ length: Math.ceil(array.length / length) }, (_, i) =>
            array.slice(i * length, (i + 1) * length)
        );
    }

    //実データ
    class GameData {
        static SELECT_NONE = -1;
        #select_index = GameData.SELECT_NONE;
        #pick_array = [];
        #block_datas = [[]];
        #start_time = 0;


        paramStrings() {

            var test_tubes_param = ``;

            for (let i = 0; i < this.block_datas.length; i++) {
                test_tubes_param += `num${i} : `;
                for (let j = 0; j < this.block_datas[i].length; j++) {
                    test_tubes_param += `${this.block_datas[i][j]} `;
                }
                test_tubes_param += `<br>`;
            }

            return `
            select index = ${this.select_index}<br>
            pick_array length = ${this.pick_array.length}<br>
            test_tube num = ${this.block_datas.length}<br>
              test tubes<br>
              ${test_tubes_param}
        `
        }

        InitializedTestTube() {
            //this.pick_array = [];
            var arr = [];

            //空の試験管追加
            {
                for (let i = 0; i < BLOCK_MAX * (START_FREE_TEST_TUBE + 6); i++) {
                    arr.push(0);
                }
            }

            //２次元配列加工
            this.block_datas = convertTo2DArrayFrom(arr, BLOCK_MAX);


        }

        InitializedParams() {
            //todo あとで実装
        }

        Initialized() {
            this.pick_array = [];
            this.start_time = 0;
            this.InitializedTestTube();
            this.InitializedParams();
        }

        startGame() {
            var arr = [];
            // 初期ブロック生成
            {
                for (let i = 0; i < START_USE_TEST_TUBE; i++) {
                    for (let j = 0; j < BLOCK_MAX; j++) {
                        arr.push(i + 1);
                    }
                }
            }
            // シャッフルアルゴリズム（Fisher-Yates shuffle）
            for (let i = arr.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [arr[i], arr[j]] = [arr[j], arr[i]]; // 要素の入れ替え
            }

            //空の試験管追加
            {
                for (let i = 0; i < BLOCK_MAX * START_FREE_TEST_TUBE; i++) {
                    arr.push(0);
                }
            }


            //２次元配列加工
            this.block_datas = convertTo2DArrayFrom(arr, BLOCK_MAX);

            this.start_time = 1;
        }

        pushCheck(index, block_id) {
            if (this.getBlockCount(index) == 0) return true;
            if (block_id == this.fetch(index)) return true;
            return false;
        }

        pushSingle(target_idx, block_id) {
            let idx = this.block_datas[target_idx].lastIndexOf(0);
            if (idx === -1) { return false; }
            this.block_datas[target_idx][idx] = block_id;
            return true;
        }

        fetch(target_idx) {
            return this.block_datas[target_idx][this.getBlockBlank(target_idx)];
        }

        push(target_idx, block_arr) {
            //世界が逆に回転する日常を飛び越え～♪己の体とその全ての存在否定はさせない♪
            [...block_arr].reverse().forEach(pick_id => {
                if (this.pushSingle(target_idx, pick_id)) {
                    block_arr.pop();//XXX:たぶん消してるブロック同じだから動作はするが、消してるやつは本当に正しいか？
                }
            });
            return block_arr;
        }

        onTap(select_idx) {

            //let IS_TAP_SELECT_INDEX = this.select_index == select_idx;
            let IS_PICKMODE = this.pick_array.length > 0;
            if (IS_PICKMODE) {
                let IS_DIFF_INDEX = this.select_index != select_idx;
                console.log(`is diff index ${IS_DIFF_INDEX}`);
                if (IS_DIFF_INDEX) {
                    if (this.pushCheck(select_idx, this.pick_array[this.pick_array.length - 1])) {
                        this.pick_array = this.push(select_idx, this.pick_array);

                        this.select_index = select_idx;
                    } else {
                        //できるならいれれない旨の処理
                    }
                } else {
                    this.pick_array = this.push(select_idx, this.pick_array);
                    this.select_index = select_idx;
                }

            } else {
                for (let i = this.getBlockBlank(select_idx); i < this.block_datas[select_idx].length; i++) {

                    if (this.pick_array.length != 0) {
                        if (this.pick_array[0] != this.block_datas[select_idx][i] //前回入手した色と違う
                        ) {
                            break;
                        }
                    }

                    this.pick_array.push(this.block_datas[select_idx][i]);
                    this.block_datas[select_idx][i] = 0;

                }

                this.select_index = select_idx;
            }

            //クリア判定
            if (this.checkClear()) {
                free_space_text = `やっとクリアしたんかおせぇｗ`;
            } else {

                free_space_text = `まだおわんねぇのか？ｗ`;
            }
        }

        checkClear() {
            /*this.block_datas.forEach(test_tube => {
                let start_id = test_tube[0];
                test_tube.forEach(id => {
                    if( id != start_id ) {
                        return false;
                    }
                });
            });*/

            for(let i = 0 ; i < this.block_datas.length ; i++ )
            {
                if( new Set(this.block_datas[i]).size > 1 ){return false ;}
            }


            return true;
        }

        getBlockCount(idx) {
            return this.block_datas[idx].filter(id => id !== 0).length;
        }

        getBlockBlank(idx) {
            return this.block_datas[idx].filter(id => id === 0).length;
        }

        pick(idx) {
            return this.pick_array[idx];
        }

        pickLength() {
            return this.pick_array.length;
        }

        selectIndex() {
            return this.select_index;
        }

        getStartTime() {
            return this.start_time;
        }


    };

    let game_data = new GameData();
    game_data.Initialized();
    free_space_text = `おう早くしろよ`;

    function UpdateScreen() {

        var test_tube_index = 0;
        var html = ``;
        game_data.block_datas.forEach(row => {

            html += `<div class="test_tube">`;

            //試験管上部描画
            let IS_SELECT_INDEX = game_data.selectIndex() == test_tube_index;
            if (IS_SELECT_INDEX)//ピックアップ中
            {
                html += `<div class="space">`;
                for (let i = 0; i < BLOCK_MAX; i++) {
                    if (i < game_data.pickLength()) {
                        html += `<div class="${COLORS[game_data.pick(i)]}">${BLOCK_CHAR}<br></div>`;
                        //html += `<div class="blue">█<br></div>`;
                    } else {
                        html += `<div class="hidden">${BLOCK_CHAR}<br></div>`;
                    }
                }
                html += `</div>`;
            } else {
                html += `<div class="space">
            <div class="hidden">${BLOCK_CHAR}<br></div>
            <div class="hidden">${BLOCK_CHAR}<br></div>
            <div class="hidden">${BLOCK_CHAR}<br></div>
            <div class="hidden">${BLOCK_CHAR}<br></div>
            </div>
            `
            }



            //試験管内部描画
            html += `<div class="unit unit${test_tube_index}">`;

            row.forEach(element => {

                if (element !== 0 && game_data.getStartTime() != 0) {
                    html += `<div class="${COLORS[element]}">${BLOCK_CHAR}<br></div>`;
                } else {
                    html += `<div class="hidden">${BLOCK_CHAR}<br></div>`;
                }

            });


            html += `</div>
            </div>
            `;

            test_tube_index += 1;
        });


        const game_screen = document.getElementById("game_screen");
        game_screen.innerHTML = html;

        if (false) {
            const debug_log = document.getElementById("debug_log");
            debug_log.innerHTML = game_data.paramStrings();
        }

        const free_space = document.getElementById("free_space");
        free_space.innerHTML = free_space_text;

        const ascii_art = document.getElementById("ascii_art");

        var aa = "";

        /*aa += "OK、ブラクラゲット。<br>";
        aa += "　　　　　　　　　　∧＿∧<br>";
        aa += "　　　　 ∧＿∧ 　（´<_｀ ）　流石だよな俺ら。<br>";
        aa += "　　　（　´_ゝ`）/　　 ⌒i<br>";
        aa += "　　 ／　　　＼./ 　　|　|<br>";
        aa += "　　/　　 　/￣￣￣￣/　|<br>";
        aa += "＿_(__ﾆつ/　 FMV　 / .| .|＿＿＿＿<br>";
        aa += "　　　 ＼/＿＿＿＿/　（u　⊃<br>";
        ascii_art.innerHTML = aa;*/


        aa += "        　　　　 　　、　i、 　 _　-‐　´￣￣｀ヽ、<br>";
        aa += "　　 　　 ,へ､!ｰ! ｰ'´　　　　　　　　　　｀ｰ-､<br>";
        aa += "　　 　 /　 ,r'´　,　　　　　　　,i　　　　　　　 ヽ_, -'´ヽ<br>";
        aa += "　　 　 !_ /　／,'　　 ／ /　 / l　　l i　　　 　　', 　 　 !<br>";
        aa += "　　　ｒ-'ヽ　i　l　　 /_＿ｌ_　ｌ　 !_,,-i､ｌ　ヽ ､　ｒ'´ー-､_ｌ<br>";
        aa += "　　　ｌ　　_｀＞､ー,r'´,二￣ 　 ｀￣ ｀ヽ‐'､_ｌ_ｌ　　　 　ヽ<br>";
        aa += "　　　｀i'´　　 　 !　 , -rﾆ､｀　　 '´,二,ヽ、　 l´￣｀ヽ､/<br>";
        aa += "　　　　ｌ　 _, -―!　　 ﾋ'_ﾉ　　　　ｌヒ_j　　　∧_　　　 !<br>";
        aa += "　 　 　 Y´　　 _j i　　　　　'　　　 　 　 　 / l　 ｀ヽr'<br>";
        aa += "　　　 　 !_　＜_ ｀ｌ　　　　　＿,　　　　　 /-'‐-､_　ｌ<br>";
        aa += "　 　 　 　 ｀! r-'　ヽ、_　　　　　　　　_ノ´　 ら´ｒ-'<br>";
        aa += "　　　　　　　｀　　　　　｀ーｧ==-＜´｀ヽ　　'ー '<br>";
        aa += "　　　　　　　　　　　　, イ´!_,へ_/ｌ｀ｌヽ<br>";
        ascii_art.innerHTML = aa;


    }


    UpdateScreen();

    //入力対応
    const container = document.getElementById("game_screen");

    let MAX_INDEX = game_data.block_datas.length;
    for (let i = 0; i < MAX_INDEX; i++) {
        container.addEventListener("click", function (event) {
            if (event.target.classList.contains(`unit${i}`)) {
                //alert(`${i}がクリックされました`);
                let SELECT_IDX = i;

                game_data.onTap(SELECT_IDX);

                UpdateScreen();

            }
        });
    }


    document.addEventListener('DOMContentLoaded', function () {
        const startButton = document.getElementById("start_button");
        startButton.addEventListener("click", () => {
            game_data.startGame();
            free_space_text = `やっと始めやがったかおせぇ`;
            UpdateScreen();
        });
    });



</script>


</html>